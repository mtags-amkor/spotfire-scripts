/*
 * Copyright (c) 2008-2015 Spotfire AB,
 * Första Långgatan 26, SE-413 28 Göteborg, Sweden.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Spotfire AB ("Confidential Information"). You shall not
 * disclose such Confidential Information and may not use it in any way,
 * absent an express written license agreement between you and Spotfire AB
 * or TIBCO Software Inc. that authorizes such use.
 */

:on ERROR EXIT

go

set QUOTED_IDENTIFIER on

go

use master

go

-- If running the scripts on a SQL Server instance with a case sensitive server collation, 
-- explicitly set a (case insensitive) collation to be used by the database. 
-- See the example below.
--create database $(ACTIONDB_NAME) collate Latin1_General_CI_AS;
create database $(ACTIONDB_NAME)

go

use $(ACTIONDB_NAME)

go

IF NOT EXISTS (SELECT * FROM sysobjects WHERE id = object_id(N'[dbo].[ACTIONLOG]')
AND OBJECTPROPERTY(id, N'IsUserTable') = 1)

BEGIN 
	CREATE TABLE ACTIONLOG (
	LOGGED_TIME DATETIME NOT NULL,
	MACHINE NVARCHAR(100) NOT NULL,
	USER_NAME NVARCHAR(402),
	ORIGINAL_TIME DATETIME,
	ORIGINAL_IP NVARCHAR(100),
	LOG_CATEGORY VARCHAR(30),
	LOG_ACTION VARCHAR(30),
	SUCCESS CHAR(1),
	SESSION_ID CHAR(36),
	ID1 NVARCHAR(400),
	ID2 NVARCHAR(400),
	ARG1 NVARCHAR(400),
	ARG2 NVARCHAR(400),
	ARG3 NVARCHAR(400),
	ARG4 NVARCHAR(400),
	ARG5 NVARCHAR(400),
	ARG6 NVARCHAR(400));

	-- Optional indices, uncomment if needed.

	-- CREATE INDEX I_LOGGED_TIME ON ACTIONLOG(LOGGED_TIME);

	-- CREATE INDEX I_MACHINE ON ACTIONLOG(MACHINE);

	-- CREATE INDEX I_USER_NAME ON ACTIONLOG(USER_NAME);

	-- CREATE INDEX I_ORIGINAL_TIME ON ACTIONLOG(ORIGINAL_TIME);

	-- CREATE INDEX I_ORIGINAL_IP ON ACTIONLOG(ORIGINAL_IP);

	-- CREATE INDEX I_LOG_CATEGORY ON ACTIONLOG(LOG_CATEGORY);

	-- CREATE INDEX I_LOG_ACTION ON ACTIONLOG(LOG_ACTION);

	-- CREATE INDEX I_LOG_CATEGORY_ACTION ON ACTIONLOG(LOG_CATEGORY,LOG_ACTION);

	-- CREATE INDEX I_SESSION_ID ON ACTIONLOG(SESSION_ID);

	-- CREATE INDEX I_ID1 ON ACTIONLOG(ID1);

	-- CREATE INDEX I_ID2 ON ACTIONLOG(ID2);

END
GO

IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'UTC_TIME')
DROP VIEW UTC_TIME
GO

CREATE VIEW UTC_TIME AS SELECT GETUTCDATE() AS TS;
GO

IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_WP_CLONE')
DROP VIEW LIBRARY_WP_CLONE
GO

CREATE VIEW LIBRARY_WP_CLONE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'library_wp' AND LOG_ACTION = 'clone'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_CREATE_CONNECTION')
DROP VIEW DAT_CON_PRO_CREATE_CONNECTION
GO

CREATE VIEW DAT_CON_PRO_CREATE_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'create_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_CREATE_CONNECTION')
DROP VIEW DAT_CON_WP_CREATE_CONNECTION
GO

CREATE VIEW DAT_CON_WP_CREATE_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'create_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_CREATE_SOURCE')
DROP VIEW DAT_CON_PRO_CREATE_SOURCE
GO

CREATE VIEW DAT_CON_PRO_CREATE_SOURCE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'create_source'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_CREATE_SOURCE')
DROP VIEW DAT_CON_WP_CREATE_SOURCE
GO

CREATE VIEW DAT_CON_WP_CREATE_SOURCE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'create_source'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DATAFUNCTION_PRO_EXECUTE')
DROP VIEW DATAFUNCTION_PRO_EXECUTE
GO

CREATE VIEW DATAFUNCTION_PRO_EXECUTE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNUSED, ID2 AS PATH, ARG1 AS PARAMS, ARG2 AS DURATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'datafunction_pro' AND LOG_ACTION = 'execute'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DATAFUNCTION_WP_EXECUTE')
DROP VIEW DATAFUNCTION_WP_EXECUTE
GO

CREATE VIEW DATAFUNCTION_WP_EXECUTE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNUSED, ID2 AS PATH, ARG1 AS PARAMS, ARG2 AS DURATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'datafunction_wp' AND LOG_ACTION = 'execute'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DATASOURCE_PRO_EXECUTE')
DROP VIEW DATASOURCE_PRO_EXECUTE
GO

CREATE VIEW DATASOURCE_PRO_EXECUTE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNUSED, ID2 AS PATH, ARG1 AS TITLE, ARG2 AS PARAMS, ARG3 AS DURATION, ARG4 AS NUMROWS FROM ACTIONLOG WHERE LOG_CATEGORY = 'datasource_pro' AND LOG_ACTION = 'execute'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DATASOURCE_WP_EXECUTE')
DROP VIEW DATASOURCE_WP_EXECUTE
GO

CREATE VIEW DATASOURCE_WP_EXECUTE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNUSED, ID2 AS PATH, ARG1 AS TITLE, ARG2 AS PARAMS, ARG3 AS DURATION, ARG4 AS NUMROWS FROM ACTIONLOG WHERE LOG_CATEGORY = 'datasource_wp' AND LOG_ACTION = 'execute'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_GET_DATA')
DROP VIEW DAT_CON_PRO_GET_DATA
GO

CREATE VIEW DAT_CON_PRO_GET_DATA  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS INTERNALQUERY, ARG4 AS NUMROWS, ARG5 AS DURATION, ARG6 AS EXTERNALQUERY FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'get_data'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_GET_DATA')
DROP VIEW DAT_CON_WP_GET_DATA
GO

CREATE VIEW DAT_CON_WP_GET_DATA  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS INTERNALQUERY, ARG4 AS NUMROWS, ARG5 AS DURATION, ARG6 AS EXTERNALQUERY FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'get_data'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_PRO_CLOSE')
DROP VIEW LIBRARY_PRO_CLOSE
GO

CREATE VIEW LIBRARY_PRO_CLOSE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'library_pro' AND LOG_ACTION = 'close'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_WP_CLOSE')
DROP VIEW LIBRARY_WP_CLOSE
GO

CREATE VIEW LIBRARY_WP_CLOSE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'library_wp' AND LOG_ACTION = 'close'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_LOAD_CONNECTION')
DROP VIEW DAT_CON_PRO_LOAD_CONNECTION
GO

CREATE VIEW DAT_CON_PRO_LOAD_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'load_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_LOAD_CONNECTION')
DROP VIEW DAT_CON_WP_LOAD_CONNECTION
GO

CREATE VIEW DAT_CON_WP_LOAD_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'load_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'FILE_PRO_LOAD')
DROP VIEW FILE_PRO_LOAD
GO

CREATE VIEW FILE_PRO_LOAD  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNUSED, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'file_pro' AND LOG_ACTION = 'load'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'FILE_WP_LOAD')
DROP VIEW FILE_WP_LOAD
GO

CREATE VIEW FILE_WP_LOAD  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNUSED, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'file_wp' AND LOG_ACTION = 'load'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_AS_LOAD')
DROP VIEW LIBRARY_AS_LOAD
GO

CREATE VIEW LIBRARY_AS_LOAD  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'library_as' AND LOG_ACTION = 'load'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_PRO_LOAD')
DROP VIEW LIBRARY_PRO_LOAD
GO

CREATE VIEW LIBRARY_PRO_LOAD  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'library_pro' AND LOG_ACTION = 'load'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_WP_LOAD')
DROP VIEW LIBRARY_WP_LOAD
GO

CREATE VIEW LIBRARY_WP_LOAD  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'library_wp' AND LOG_ACTION = 'load'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_LOAD_SOURCE')
DROP VIEW DAT_CON_PRO_LOAD_SOURCE
GO

CREATE VIEW DAT_CON_PRO_LOAD_SOURCE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'load_source'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_LOAD_SOURCE')
DROP VIEW DAT_CON_WP_LOAD_SOURCE
GO

CREATE VIEW DAT_CON_WP_LOAD_SOURCE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'load_source'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_GROUP_ADD_MEMBER')
DROP VIEW ADMIN_GROUP_ADD_MEMBER
GO

CREATE VIEW ADMIN_GROUP_ADD_MEMBER  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS NAME, ID2 AS GNAME, ARG1 AS SORT, ARG2 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'group_add_member'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ANALYSIS_PRO_APPLY_BOOKMARK')
DROP VIEW ANALYSIS_PRO_APPLY_BOOKMARK
GO

CREATE VIEW ANALYSIS_PRO_APPLY_BOOKMARK  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS BOOKMARKNAME, ARG2 AS UNUSED, ARG3 AS WPSESSIONID, ARG4 AS WEBANALYSISID FROM ACTIONLOG WHERE LOG_CATEGORY = 'analysis_pro' AND LOG_ACTION = 'apply_bookmark'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ANALYSIS_WP_APPLY_BOOKMARK')
DROP VIEW ANALYSIS_WP_APPLY_BOOKMARK
GO

CREATE VIEW ANALYSIS_WP_APPLY_BOOKMARK  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS BOOKMARKNAME, ARG2 AS UNUSED, ARG3 AS WPSESSIONID, ARG4 AS WEBANALYSISID FROM ACTIONLOG WHERE LOG_CATEGORY = 'analysis_wp' AND LOG_ACTION = 'apply_bookmark'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ANALYSIS_PRO_SET_PAGE')
DROP VIEW ANALYSIS_PRO_SET_PAGE
GO

CREATE VIEW ANALYSIS_PRO_SET_PAGE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS PAGENAME, ARG2 AS UNUSED, ARG3 AS WPSESSIONID, ARG4 AS WEBANALYSISID FROM ACTIONLOG WHERE LOG_CATEGORY = 'analysis_pro' AND LOG_ACTION = 'set_page'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ANALYSIS_WP_SET_PAGE')
DROP VIEW ANALYSIS_WP_SET_PAGE
GO

CREATE VIEW ANALYSIS_WP_SET_PAGE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS PAGENAME, ARG2 AS UNUSED, ARG3 AS WPSESSIONID, ARG4 AS WEBANALYSISID FROM ACTIONLOG WHERE LOG_CATEGORY = 'analysis_wp' AND LOG_ACTION = 'set_page'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTOMATION_JOB_AS_JOB_FINISHED')
DROP VIEW AUTOMATION_JOB_AS_JOB_FINISHED
GO

CREATE VIEW AUTOMATION_JOB_AS_JOB_FINISHED  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS JOBID, ARG2 AS STATUS, ARG3 AS EXECUTIONTIME, ARG4 AS MESSAGE FROM ACTIONLOG WHERE LOG_CATEGORY = 'automation_job_as' AND LOG_ACTION = 'job_finished'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTOMATION_JOB_AS_JOB_STARTED')
DROP VIEW AUTOMATION_JOB_AS_JOB_STARTED
GO

CREATE VIEW AUTOMATION_JOB_AS_JOB_STARTED  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS JOBID, ARG2 AS STATUS, ARG3 AS EXECUTIONTIME, ARG4 AS MESSAGE FROM ACTIONLOG WHERE LOG_CATEGORY = 'automation_job_as' AND LOG_ACTION = 'job_started'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_CREATE_GROUP')
DROP VIEW ADMIN_CREATE_GROUP
GO

CREATE VIEW ADMIN_CREATE_GROUP  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS GNAME, ID2 AS DISPLAYNAME, ARG1 AS EMAIL FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'create_group'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_CREATE_USER')
DROP VIEW ADMIN_CREATE_USER
GO

CREATE VIEW ADMIN_CREATE_USER  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME, ID2 AS DISPLAYNAME, ARG1 AS EMAIL FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'create_user'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_IMPERSONATE')
DROP VIEW AUTH_IMPERSONATE
GO

CREATE VIEW AUTH_IMPERSONATE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth' AND LOG_ACTION = 'impersonate'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'INFO_LINK_CREATE_IL')
DROP VIEW INFO_LINK_CREATE_IL
GO

CREATE VIEW INFO_LINK_CREATE_IL  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'info_link' AND LOG_ACTION = 'create_il'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'INFO_LINK_GET_DATA')
DROP VIEW INFO_LINK_GET_DATA
GO

CREATE VIEW INFO_LINK_GET_DATA  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS DURATION, ARG2 AS SIZEB, ARG3 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'info_link' AND LOG_ACTION = 'get_data'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'INFO_LINK_LOAD_IL')
DROP VIEW INFO_LINK_LOAD_IL
GO

CREATE VIEW INFO_LINK_LOAD_IL  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'info_link' AND LOG_ACTION = 'load_il'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'INFO_LINK_UPDATE_IL')
DROP VIEW INFO_LINK_UPDATE_IL
GO

CREATE VIEW INFO_LINK_UPDATE_IL  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH FROM ACTIONLOG WHERE LOG_CATEGORY = 'info_link' AND LOG_ACTION = 'update_il'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_COPY')
DROP VIEW LIBRARY_COPY
GO

CREATE VIEW LIBRARY_COPY  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS LIBRARYTYPE, ARG2 AS DESTLIBRARYID, ARG3 AS DESTPATH, ARG4 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'copy'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_CREATE')
DROP VIEW LIBRARY_CREATE
GO

CREATE VIEW LIBRARY_CREATE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS LIBRARYTYPE, ARG2 AS PRESIZE, ARG3 AS POSTSIZE FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'create'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_DELETE')
DROP VIEW LIBRARY_DELETE
GO

CREATE VIEW LIBRARY_DELETE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS LIBRARYTYPE, ARG2 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'delete'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_EXPORT')
DROP VIEW LIBRARY_EXPORT
GO

CREATE VIEW LIBRARY_EXPORT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS DESTPATH, ARG2 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'export'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_IMPORT')
DROP VIEW LIBRARY_IMPORT
GO

CREATE VIEW LIBRARY_IMPORT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS DESTPATH, ARG2 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'import'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_LOAD_CONTENT')
DROP VIEW LIBRARY_LOAD_CONTENT
GO

CREATE VIEW LIBRARY_LOAD_CONTENT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS LIBRARYTYPE, ARG2 AS DURATION, ARG3 AS SIZEB, ARG4 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'load_content'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_MOVE')
DROP VIEW LIBRARY_MOVE
GO

CREATE VIEW LIBRARY_MOVE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS LIBRARYTYPE, ARG2 AS DESTLIBRARYID, ARG3 AS DESTPATH, ARG4 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'move'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_REMOVE_PERM')
DROP VIEW LIBRARY_REMOVE_PERM
GO

CREATE VIEW LIBRARY_REMOVE_PERM  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS NAME, ARG2 AS SORT FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'remove_perm'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_SAVE_CONTENT')
DROP VIEW LIBRARY_SAVE_CONTENT
GO

CREATE VIEW LIBRARY_SAVE_CONTENT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS LIBRARYTYPE, ARG2 AS PRESIZE, ARG3 AS POSTSIZE FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'save_content'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_SET_GROUP_PERM')
DROP VIEW LIBRARY_SET_GROUP_PERM
GO

CREATE VIEW LIBRARY_SET_GROUP_PERM  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS GNAME, ARG2 AS PERMISSION, ARG3 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'set_group_perm'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_SET_USER_PERM')
DROP VIEW LIBRARY_SET_USER_PERM
GO

CREATE VIEW LIBRARY_SET_USER_PERM  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS PATH, ARG1 AS UNAME, ARG2 AS PERMISSION, ARG3 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library' AND LOG_ACTION = 'set_user_perm'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'LIBRARY_WP_UPDATE')
DROP VIEW LIBRARY_WP_UPDATE
GO

CREATE VIEW LIBRARY_WP_UPDATE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS UNUSED1, ARG2 AS UNUSED2, ARG3 AS WPSESSIONID FROM ACTIONLOG WHERE LOG_CATEGORY = 'library_wp' AND LOG_ACTION = 'update'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_REMOVE_LICENSE')
DROP VIEW ADMIN_REMOVE_LICENSE
GO

CREATE VIEW ADMIN_REMOVE_LICENSE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS GNAME, ID2 AS LICENSENAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'remove_license'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_SET_LICENSE')
DROP VIEW ADMIN_SET_LICENSE
GO

CREATE VIEW ADMIN_SET_LICENSE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS GNAME, ID2 AS LICENSENAME, ARG1 AS EXCLUDINGFUNCTION FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'set_license'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_LOGIN')
DROP VIEW AUTH_LOGIN
GO

CREATE VIEW AUTH_LOGIN  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS CLIENTTYPE, ID2 AS CLIENTVER, ARG1 AS DISPLAYNAME, ARG2 AS EMAIL FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth' AND LOG_ACTION = 'login'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_LOGOUT')
DROP VIEW AUTH_LOGOUT
GO

CREATE VIEW AUTH_LOGOUT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth' AND LOG_ACTION = 'logout'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'MONITORING_AVERAGE')
DROP VIEW MONITORING_AVERAGE
GO

CREATE VIEW MONITORING_AVERAGE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS MEASURE, ID2 AS UNUSED, ARG1 AS MEAN, ARG2 AS MIN, ARG3 AS MAX FROM ACTIONLOG WHERE LOG_CATEGORY = 'monitoring' AND LOG_ACTION = 'average'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'MONITORING_WP_AVERAGE')
DROP VIEW MONITORING_WP_AVERAGE
GO

CREATE VIEW MONITORING_WP_AVERAGE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS MEASURE, ID2 AS UNUSED, ARG1 AS MEAN, ARG2 AS MIN, ARG3 AS MAX FROM ACTIONLOG WHERE LOG_CATEGORY = 'monitoring_wp' AND LOG_ACTION = 'average'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'MONITORING_MEASUREMENT')
DROP VIEW MONITORING_MEASUREMENT
GO

CREATE VIEW MONITORING_MEASUREMENT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS MEASURE, ID2 AS UNUSED, ARG1 AS VALUE FROM ACTIONLOG WHERE LOG_CATEGORY = 'monitoring' AND LOG_ACTION = 'measurement'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_SET_PREFERENCE')
DROP VIEW ADMIN_SET_PREFERENCE
GO

CREATE VIEW ADMIN_SET_PREFERENCE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS NAME, ID2 AS PREFTYPE, ARG1 AS CATEGORY, ARG2 AS ID FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'set_preference'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_REMOVE_PRINCIPAL')
DROP VIEW ADMIN_REMOVE_PRINCIPAL
GO

CREATE VIEW ADMIN_REMOVE_PRINCIPAL  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS NAME, ID2 AS SORT, ARG1 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'remove_principal'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_GROUP_REMOVE_MEMBER')
DROP VIEW ADMIN_GROUP_REMOVE_MEMBER
GO

CREATE VIEW ADMIN_GROUP_REMOVE_MEMBER  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS NAME, ID2 AS GNAME, ARG1 AS SORT, ARG2 AS GROUPINGID FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'group_remove_member'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_RENAME_PRINCIPAL')
DROP VIEW ADMIN_RENAME_PRINCIPAL
GO

CREATE VIEW ADMIN_RENAME_PRINCIPAL  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS OLDNAME, ID2 AS NEWNAME, ARG1 AS SORT FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'rename_principal'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'ADMIN_CHANGE_PASSWD')
DROP VIEW ADMIN_CHANGE_PASSWD
GO

CREATE VIEW ADMIN_CHANGE_PASSWD  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'admin' AND LOG_ACTION = 'change_passwd'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_AS_LOGIN')
DROP VIEW AUTH_AS_LOGIN
GO

CREATE VIEW AUTH_AS_LOGIN  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth_as' AND LOG_ACTION = 'login'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_PRO_LOGIN')
DROP VIEW AUTH_PRO_LOGIN
GO

CREATE VIEW AUTH_PRO_LOGIN  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth_pro' AND LOG_ACTION = 'login'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_WP_LOGIN')
DROP VIEW AUTH_WP_LOGIN
GO

CREATE VIEW AUTH_WP_LOGIN  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth_wp' AND LOG_ACTION = 'login'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_AS_LOGOUT')
DROP VIEW AUTH_AS_LOGOUT
GO

CREATE VIEW AUTH_AS_LOGOUT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth_as' AND LOG_ACTION = 'logout'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_PRO_LOGOUT')
DROP VIEW AUTH_PRO_LOGOUT
GO

CREATE VIEW AUTH_PRO_LOGOUT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth_pro' AND LOG_ACTION = 'logout'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'AUTH_WP_LOGOUT')
DROP VIEW AUTH_WP_LOGOUT
GO

CREATE VIEW AUTH_WP_LOGOUT  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS UNAME FROM ACTIONLOG WHERE LOG_CATEGORY = 'auth_wp' AND LOG_ACTION = 'logout'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'MONITORING_WP_COUNTER')
DROP VIEW MONITORING_WP_COUNTER
GO

CREATE VIEW MONITORING_WP_COUNTER  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS MEASURE, ID2 AS UNUSED, ARG1 AS VALUE FROM ACTIONLOG WHERE LOG_CATEGORY = 'monitoring_wp' AND LOG_ACTION = 'counter'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_SYNCH_CONNECTION')
DROP VIEW DAT_CON_PRO_SYNCH_CONNECTION
GO

CREATE VIEW DAT_CON_PRO_SYNCH_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'synchronize_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_SYNCH_CONNECTION')
DROP VIEW DAT_CON_WP_SYNCH_CONNECTION
GO

CREATE VIEW DAT_CON_WP_SYNCH_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'synchronize_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_UPDATE_CONNECTION')
DROP VIEW DAT_CON_PRO_UPDATE_CONNECTION
GO

CREATE VIEW DAT_CON_PRO_UPDATE_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'update_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_UPDATE_CONNECTION')
DROP VIEW DAT_CON_WP_UPDATE_CONNECTION
GO

CREATE VIEW DAT_CON_WP_UPDATE_CONNECTION  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION, ARG3 AS DATASOURCELIBRARYID FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'update_connection'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_PRO_UPDATE_SOURCE')
DROP VIEW DAT_CON_PRO_UPDATE_SOURCE
GO

CREATE VIEW DAT_CON_PRO_UPDATE_SOURCE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_pro' AND LOG_ACTION = 'update_source'
GO


IF EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = 'DAT_CON_WP_UPDATE_SOURCE')
DROP VIEW DAT_CON_WP_UPDATE_SOURCE
GO

CREATE VIEW DAT_CON_WP_UPDATE_SOURCE  AS SELECT LOGGED_TIME, MACHINE, USER_NAME, ORIGINAL_TIME, ORIGINAL_IP, SUCCESS, SESSION_ID, ID1 AS LIBRARYID, ID2 AS LIBRARYPATH, ARG1 AS DATASOURCETYPE, ARG2 AS DATASOURCEINFORMATION FROM ACTIONLOG WHERE LOG_CATEGORY = 'data_connector_wp' AND LOG_ACTION = 'update_source'
GO
